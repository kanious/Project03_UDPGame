// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameState_2eproto;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameState* Arena::CreateMaybeMessage<::GameState>(Arena*);
template<> ::Object* Arena::CreateMaybeMessage<::Object>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Object_ObjType : int {
  Object_ObjType_PLAYER = 0,
  Object_ObjType_BULLET = 1
};
bool Object_ObjType_IsValid(int value);
constexpr Object_ObjType Object_ObjType_ObjType_MIN = Object_ObjType_PLAYER;
constexpr Object_ObjType Object_ObjType_ObjType_MAX = Object_ObjType_BULLET;
constexpr int Object_ObjType_ObjType_ARRAYSIZE = Object_ObjType_ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_ObjType_descriptor();
template<typename T>
inline const std::string& Object_ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_ObjType_descriptor(), enum_t_value);
}
inline bool Object_ObjType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Object_ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_ObjType>(
    Object_ObjType_descriptor(), name, value);
}
// ===================================================================

class Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  explicit constexpr Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return new Object();
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Object_ObjType ObjType;
  static constexpr ObjType PLAYER =
    Object_ObjType_PLAYER;
  static constexpr ObjType BULLET =
    Object_ObjType_BULLET;
  static inline bool ObjType_IsValid(int value) {
    return Object_ObjType_IsValid(value);
  }
  static constexpr ObjType ObjType_MIN =
    Object_ObjType_ObjType_MIN;
  static constexpr ObjType ObjType_MAX =
    Object_ObjType_ObjType_MAX;
  static constexpr int ObjType_ARRAYSIZE =
    Object_ObjType_ObjType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjType_descriptor() {
    return Object_ObjType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjType_Name.");
    return Object_ObjType_Name(enum_t_value);
  }
  static inline bool ObjType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjType* value) {
    return Object_ObjType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTickNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
    kStateFieldNumber = 3,
    kPosXFieldNumber = 4,
    kPosYFieldNumber = 5,
    kPosZFieldNumber = 6,
    kVelXFieldNumber = 7,
    kVelYFieldNumber = 8,
    kVelZFieldNumber = 9,
    kRotYFieldNumber = 10,
  };
  // optional int64 tick_number = 1;
  bool has_tick_number() const;
  private:
  bool _internal_has_tick_number() const;
  public:
  void clear_tick_number();
  ::PROTOBUF_NAMESPACE_ID::int64 tick_number() const;
  void set_tick_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tick_number() const;
  void _internal_set_tick_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .Object.ObjType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Object_ObjType type() const;
  void set_type(::Object_ObjType value);
  private:
  ::Object_ObjType _internal_type() const;
  void _internal_set_type(::Object_ObjType value);
  public:

  // optional int32 state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float posX = 4;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // optional float posY = 5;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // optional float posZ = 6;
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // optional float velX = 7;
  bool has_velx() const;
  private:
  bool _internal_has_velx() const;
  public:
  void clear_velx();
  float velx() const;
  void set_velx(float value);
  private:
  float _internal_velx() const;
  void _internal_set_velx(float value);
  public:

  // optional float velY = 8;
  bool has_vely() const;
  private:
  bool _internal_has_vely() const;
  public:
  void clear_vely();
  float vely() const;
  void set_vely(float value);
  private:
  float _internal_vely() const;
  void _internal_set_vely(float value);
  public:

  // optional float velZ = 9;
  bool has_velz() const;
  private:
  bool _internal_has_velz() const;
  public:
  void clear_velz();
  float velz() const;
  void set_velz(float value);
  private:
  float _internal_velz() const;
  void _internal_set_velz(float value);
  public:

  // optional float rotY = 10;
  bool has_roty() const;
  private:
  bool _internal_has_roty() const;
  public:
  void clear_roty();
  float roty() const;
  void set_roty(float value);
  private:
  float _internal_roty() const;
  void _internal_set_roty(float value);
  public:

  // @@protoc_insertion_point(class_scope:Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 tick_number_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  float posx_;
  float posy_;
  float posz_;
  float velx_;
  float vely_;
  float velz_;
  float roty_;
  friend struct ::TableStruct_GameState_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return new GameState();
  }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kBulletsFieldNumber = 4,
    kMessageIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // repeated .Object players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Object* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
      mutable_players();
  private:
  const ::Object& _internal_players(int index) const;
  ::Object* _internal_add_players();
  public:
  const ::Object& players(int index) const;
  ::Object* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
      players() const;

  // repeated .Object bullets = 4;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::Object* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
      mutable_bullets();
  private:
  const ::Object& _internal_bullets(int index) const;
  ::Object* _internal_add_bullets();
  public:
  const ::Object& bullets(int index) const;
  ::Object* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
      bullets() const;

  // required int32 messageId = 1;
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::PROTOBUF_NAMESPACE_ID::int32 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messageid() const;
  void _internal_set_messageid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 clientId = 2;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object > bullets_;
  ::PROTOBUF_NAMESPACE_ID::int32 messageid_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  friend struct ::TableStruct_GameState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// optional int64 tick_number = 1;
inline bool Object::_internal_has_tick_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Object::has_tick_number() const {
  return _internal_has_tick_number();
}
inline void Object::clear_tick_number() {
  tick_number_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_tick_number() const {
  return tick_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::tick_number() const {
  // @@protoc_insertion_point(field_get:Object.tick_number)
  return _internal_tick_number();
}
inline void Object::_internal_set_tick_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  tick_number_ = value;
}
inline void Object::set_tick_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tick_number(value);
  // @@protoc_insertion_point(field_set:Object.tick_number)
}

// optional .Object.ObjType type = 2;
inline bool Object::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Object::has_type() const {
  return _internal_has_type();
}
inline void Object::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Object_ObjType Object::_internal_type() const {
  return static_cast< ::Object_ObjType >(type_);
}
inline ::Object_ObjType Object::type() const {
  // @@protoc_insertion_point(field_get:Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::Object_ObjType value) {
  assert(::Object_ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Object::set_type(::Object_ObjType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Object.type)
}

// optional int32 state = 3;
inline bool Object::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Object::has_state() const {
  return _internal_has_state();
}
inline void Object::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::state() const {
  // @@protoc_insertion_point(field_get:Object.state)
  return _internal_state();
}
inline void Object::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void Object::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Object.state)
}

// optional float posX = 4;
inline bool Object::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Object::has_posx() const {
  return _internal_has_posx();
}
inline void Object::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Object::_internal_posx() const {
  return posx_;
}
inline float Object::posx() const {
  // @@protoc_insertion_point(field_get:Object.posX)
  return _internal_posx();
}
inline void Object::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000008u;
  posx_ = value;
}
inline void Object::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Object.posX)
}

// optional float posY = 5;
inline bool Object::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Object::has_posy() const {
  return _internal_has_posy();
}
inline void Object::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Object::_internal_posy() const {
  return posy_;
}
inline float Object::posy() const {
  // @@protoc_insertion_point(field_get:Object.posY)
  return _internal_posy();
}
inline void Object::_internal_set_posy(float value) {
  _has_bits_[0] |= 0x00000010u;
  posy_ = value;
}
inline void Object::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Object.posY)
}

// optional float posZ = 6;
inline bool Object::_internal_has_posz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Object::has_posz() const {
  return _internal_has_posz();
}
inline void Object::clear_posz() {
  posz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Object::_internal_posz() const {
  return posz_;
}
inline float Object::posz() const {
  // @@protoc_insertion_point(field_get:Object.posZ)
  return _internal_posz();
}
inline void Object::_internal_set_posz(float value) {
  _has_bits_[0] |= 0x00000020u;
  posz_ = value;
}
inline void Object::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:Object.posZ)
}

// optional float velX = 7;
inline bool Object::_internal_has_velx() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Object::has_velx() const {
  return _internal_has_velx();
}
inline void Object::clear_velx() {
  velx_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Object::_internal_velx() const {
  return velx_;
}
inline float Object::velx() const {
  // @@protoc_insertion_point(field_get:Object.velX)
  return _internal_velx();
}
inline void Object::_internal_set_velx(float value) {
  _has_bits_[0] |= 0x00000040u;
  velx_ = value;
}
inline void Object::set_velx(float value) {
  _internal_set_velx(value);
  // @@protoc_insertion_point(field_set:Object.velX)
}

// optional float velY = 8;
inline bool Object::_internal_has_vely() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Object::has_vely() const {
  return _internal_has_vely();
}
inline void Object::clear_vely() {
  vely_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Object::_internal_vely() const {
  return vely_;
}
inline float Object::vely() const {
  // @@protoc_insertion_point(field_get:Object.velY)
  return _internal_vely();
}
inline void Object::_internal_set_vely(float value) {
  _has_bits_[0] |= 0x00000080u;
  vely_ = value;
}
inline void Object::set_vely(float value) {
  _internal_set_vely(value);
  // @@protoc_insertion_point(field_set:Object.velY)
}

// optional float velZ = 9;
inline bool Object::_internal_has_velz() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Object::has_velz() const {
  return _internal_has_velz();
}
inline void Object::clear_velz() {
  velz_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Object::_internal_velz() const {
  return velz_;
}
inline float Object::velz() const {
  // @@protoc_insertion_point(field_get:Object.velZ)
  return _internal_velz();
}
inline void Object::_internal_set_velz(float value) {
  _has_bits_[0] |= 0x00000100u;
  velz_ = value;
}
inline void Object::set_velz(float value) {
  _internal_set_velz(value);
  // @@protoc_insertion_point(field_set:Object.velZ)
}

// optional float rotY = 10;
inline bool Object::_internal_has_roty() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Object::has_roty() const {
  return _internal_has_roty();
}
inline void Object::clear_roty() {
  roty_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Object::_internal_roty() const {
  return roty_;
}
inline float Object::roty() const {
  // @@protoc_insertion_point(field_get:Object.rotY)
  return _internal_roty();
}
inline void Object::_internal_set_roty(float value) {
  _has_bits_[0] |= 0x00000200u;
  roty_ = value;
}
inline void Object::set_roty(float value) {
  _internal_set_roty(value);
  // @@protoc_insertion_point(field_set:Object.rotY)
}

// -------------------------------------------------------------------

// GameState

// required int32 messageId = 1;
inline bool GameState::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameState::has_messageid() const {
  return _internal_has_messageid();
}
inline void GameState::clear_messageid() {
  messageid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::_internal_messageid() const {
  return messageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::messageid() const {
  // @@protoc_insertion_point(field_get:GameState.messageId)
  return _internal_messageid();
}
inline void GameState::_internal_set_messageid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  messageid_ = value;
}
inline void GameState::set_messageid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:GameState.messageId)
}

// required int32 clientId = 2;
inline bool GameState::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameState::has_clientid() const {
  return _internal_has_clientid();
}
inline void GameState::clear_clientid() {
  clientid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameState::clientid() const {
  // @@protoc_insertion_point(field_get:GameState.clientId)
  return _internal_clientid();
}
inline void GameState::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_ = value;
}
inline void GameState::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:GameState.clientId)
}

// repeated .Object players = 3;
inline int GameState::_internal_players_size() const {
  return players_.size();
}
inline int GameState::players_size() const {
  return _internal_players_size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::Object* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:GameState.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:GameState.players)
  return &players_;
}
inline const ::Object& GameState::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Object& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:GameState.players)
  return _internal_players(index);
}
inline ::Object* GameState::_internal_add_players() {
  return players_.Add();
}
inline ::Object* GameState::add_players() {
  ::Object* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:GameState.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:GameState.players)
  return players_;
}

// repeated .Object bullets = 4;
inline int GameState::_internal_bullets_size() const {
  return bullets_.size();
}
inline int GameState::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameState::clear_bullets() {
  bullets_.Clear();
}
inline ::Object* GameState::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:GameState.bullets)
  return bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >*
GameState::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:GameState.bullets)
  return &bullets_;
}
inline const ::Object& GameState::_internal_bullets(int index) const {
  return bullets_.Get(index);
}
inline const ::Object& GameState::bullets(int index) const {
  // @@protoc_insertion_point(field_get:GameState.bullets)
  return _internal_bullets(index);
}
inline ::Object* GameState::_internal_add_bullets() {
  return bullets_.Add();
}
inline ::Object* GameState::add_bullets() {
  ::Object* _add = _internal_add_bullets();
  // @@protoc_insertion_point(field_add:GameState.bullets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Object >&
GameState::bullets() const {
  // @@protoc_insertion_point(field_list:GameState.bullets)
  return bullets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Object_ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Object_ObjType>() {
  return ::Object_ObjType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameState_2eproto
